# CNN for image recogonition

import random as rd
import numpy as np
import sklearn
from sklearn import preprocessing
import scipy.io

#### data input
dic = scipy.io.loadmat('/Users/mnist_uint8.mat')
x_train = dic['train_x']
y_train = dic['train_y']
x_test = dic['test_x']
y_test = dic['test_y']

x_train_norm = preprocessing.normalize(x_train, norm='l2')
y_train_norm = preprocessing.normalize(y_train,norm='l2')
x_test_norm = preprocessing.normalize(x_test, norm ='l2')
y_test_norm = preprocessing.normalize(y_test,norm='l2')


def weight_varible(shape):
    initial = tf.truncated_normal(shape, stddev=0.1)
    return tf.Variable(initial)

def bias_variable(shape):
    initial = tf.constant(0.1, shape=shape)
    return tf.Variable(initial)

def conv2d(x, W):
    return tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], padding='SAME')

def max_pool_2x2(x):
    return tf.nn.max_pool(x, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')


# paras
W_conv1 = weight_varible([5, 5, 1, 32])
b_conv1 = bias_variable([32])

# conv layer-1
x = tf.placeholder(tf.float32, [None, 784])
x_image = tf.reshape(x, [-1, 28, 28, 1])

h_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)
h_pool1 = max_pool_2x2(h_conv1)

# conv layer-2
W_conv2 = weight_varible([5, 5, 32, 64])
b_conv2 = bias_variable([64])

h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)
h_pool2 = max_pool_2x2(h_conv2)

# full connection
W_fc1 = weight_varible([7 * 7 * 64, 1024])
b_fc1 = bias_variable([1024])

h_pool2_flat = tf.reshape(h_pool2, [-1, 7 * 7 * 64])
h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)

# dropout
keep_prob = tf.placeholder(tf.float32)
h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)

# output layer: softmax
W_fc2 = weight_varible([1024, 10])
b_fc2 = bias_variable([10])

y_conv = tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)
y_ = tf.placeholder(tf.float32, [None, 10])

# model training
cross_entropy = -tf.reduce_sum(y_ * tf.log(y_conv))
train_step = tf.train.AdamOptimizer(1e-4).minimize(cross_entropy)

correct_prediction = tf.equal(tf.arg_max(y_conv, 1), tf.arg_max(y_, 1))
accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))

# init
init = tf.initialize_all_variables()
sess = tf.Session()
sess.run(init)

for i in range(5000):
    #batch = mnist.train.next_batch(50)
    b_j = rd.sample(np.arange(60000).tolist(), 100)
    batch_xs = x_train_norm[b_j]
    batch_ys = y_train_norm[b_j]
    if i % 100 == 0:
        print("Accuarcy on training-dataset: ", sess.run(accuracy, feed_dict={x: batch_xs, y_: batch_ys, keep_prob: 1.0}))
    sess.run(train_step, feed_dict = {x: batch_xs, y_: batch_ys, keep_prob: 0.5})

# accuacy on test
print("test accuracy:", sess.run(accuracy, feed_dict={x: x_test_norm, y_: y_test_norm, keep_prob: 1.0}))